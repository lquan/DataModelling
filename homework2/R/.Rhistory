library(pls)
library(MASS)
library(boot)
library(DAAG)
library(car)
#library(TeachingDemos)
library(FitAR)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
autos2.pca <- prcomp(autos2[1:14],scale=TRUE,center=TRUE)
plot(autos2.pca)
summary(autos2.pca)
autos2.pcr <- lm(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
#summary(autos2.pca)
autos2.pcr2 <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
#met boxcox
boxcox(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
lambda <- -0.4
autos2.bcprice <-   bxcx(autos2$price, lambda, InverseQ = FALSE, type = "BoxCox")
autos2.bcpcr <- lm(autos2.bcprice~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
autos2.price <- bxcx(autos2.bcpcr$fitted.values, lambda,InverseQ= TRUE, type = "BoxCox")
plot(autos2$price,autos2.price)
#manuele PCR
sqrt(sum((autos2.pcr$residuals)^2))/159
#automatisch met pcr commando
sqrt(sum((autos2.pcr2$residuals)^2))/159
#manuele met boxcox transfo
sqrt(sum((autos2.price-autos2$price)^2))/159
plot(autos2$price,autos2.pcr$fitted.values)
lines(c(1:40000),c(1:40000),col='red')
library(pls)
library(MASS)
library(boot)
library(DAAG)
library(car)
#library(TeachingDemos)
library(FitAR)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
autos2.pca <- prcomp(autos2[1:14],scale=TRUE,center=TRUE)
plot(autos2.pca)
summary(autos2.pca)
autos2.pcr <- lm(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
#summary(autos2.pca)
autos2.pcr2 <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
#met boxcox
boxcox(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
lambda <- -0.4
autos2.bcprice <-   bxcx(autos2$price, lambda, InverseQ = FALSE, type = "BoxCox")
autos2.bcpcr <- lm(autos2.bcprice~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
autos2.price <- bxcx(autos2.bcpcr$fitted.values, lambda,InverseQ= TRUE, type = "BoxCox")
plot(autos2$price,autos2.price)
#manuele PCR
sqrt(sum((autos2.pcr$residuals)^2))/159
#automatisch met pcr commando
sqrt(sum((autos2.pcr2$residuals)^2))/159
#manuele met boxcox transfo
sqrt(sum((autos2.price-autos2$price)^2))/159
plot(autos2$price,autos2.pcr$fitted.values)
lines(c(1:40000),c(1:40000),col='red')
summary(autos2.price)
summary(autos2$price)
summary(autos2.pcr$fitted.values)
summary(autos2.pcr2$fitted.values)
var(autos2.price)
var(autos2$price)
var(autos2.pcr2$fitted.values)
var(autos2.pcr2$fitted.values)#Andreas Put & Li Quan - May 23, 2011
#homework 2
#library(FactoMineR)
library(pls)
library(MASS)
library(boot)
library(DAAG)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
#nobs <- nrow(autos2)
#idx <- 1:nobs
#trainingidx <- sample(idx, trunc(length(idx)/3))
#autos2.training <- autos2[-trainingidx,]
#autos2.validation <- autos2[trainingidx,]
#biplot(autos2)
autos3 <- autos2
for (i in c(4,7,11,15)) {
  autos3[,i] <- log(autos3[,i])
  print(i)
}
autos3 <- autos3[,-10]
autos2.pca <- prcomp(autos2,scale=TRUE,center=TRUE)
plot(autos2.pca)
#summary(autos2.pca)
autos2.pcr <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
crossval(autos2.pcr,autos2,3)
print(sum(abs(residuals(autos2.pcr)))/nobs)
#qqnorm(autos2.pca)
#linear<-lm(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,autos2)
#plot(linear)
autos2.initial <- lm(price~1,autos2)
autos2.aic <- stepAIC(autos2.initial,list(upper=~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,lower=~1),direction="both")
cvtemp <- CVlm(df=autos2, lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2), m=3) # 3 fold cross-validation
linear<-lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2.training)
autos2.pls <- plsr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
biplot(autos2.pls)
for (i in 1:14) {
  hist(autos2[,i])
  readline('CR to continue ')
  print(i)
  }
#Andreas Put & Li Quan - May 23, 2011
#homework 2
library(MASS)
library(car)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?")
autos$symboling <- factor(autos$symboling,ordered=T)
autos$num.of.doors <- factor(autos$num.of.doors,ordered=T, levels=c("two","four"))
autos$num.of.cylinders <- factor(autos$num.of.cylinders,ordered=T, levels=c("two","three","four","five","six","eight","twelve"))
autos<-na.omit(autos)
#exploratory analysis
summary(autos)
#library(rggobi), for interactive data exploration with ggobi, type ggobi(autos)
#plot(price~.-price,autos)
#data transformation is needed for price
autos2 <- autos
par(mfrow=c(1,2))
qqnorm(autos2$price,main="Normal Q-Q Plot of price before transformation")
qqline(autos2$price)
#we perform logarithmic transformation on price
autos2$price <- log10(autos$price)
qqnorm(autos2$price,main="Normal Q-Q Plot of price after transformation")
qqline(autos2$price)
par(mfrow=c(1,1))
autosNum <- autos2[sapply(autos2,is.numeric)] #consider only numerical attributes
library(corrplot)
autosNum.cor <- cor(autosNum)
corrplot::corrplot(autosNum.cor) #avoids using corrplot of pls library
#PCA
library(pls)
autosNum.pca <- prcomp(autosNum,scale=T,center=T)
summary(autosNum.pca)
plot(autosNum.pca,main='')
biplot(autosNum.pca)
#qqnorm(autosNum.pca$x[,1]);qqline(autosNum.pca$x[,1])
#scatterplot(autosNum.pca$x[,1], autosNum.pca$x[,2])
npc <- 4
par(mfrow=c(2,1))
##PCR
autosNum.pcr <- pcr(price~.-price, data = autosNum, ncomp=npc, validation="CV", scale=T)
#summary(autosNum.pcr)
plot(autosNum.pcr,main="PCR")
##PLS
autosNum.plsr <- plsr(price~.-price, data = autosNum, ncomp=npc, validation="CV",scale=T)
plot(autosNum.plsr,main="PLS")
par(mfrow=c(1,1))
## linear model using all numeric attributes
autosNum.lm <- lm(price~ .-price,autosNum)
summary(autosNum.lm)
plot(autosNum.lm)
#model selection by AIC in stepwise algorithm
autos.aic <- stepAIC(lm(price~1,autos),
                    list(upper=~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,lower=~1),
                    direction="both")
boxcox(autos.aic, data = autos)
lambda <- -0.3
autos$price <-   bxcx(autos$price, lambda, InverseQ = FALSE, type = "BoxCox")
#aov
formula <- price ~ drive.wheels
autos2.aov <- aov(formula, autos2)
summary(autos2.aov)
plot(formula,autos2)
autosNum.pca
plot(autosNum.pcr,main="PCR")
lines(c(1:40000),c(1:40000))
help(crossval)
crossval(
)
library(pls)
library(MASS)
library(boot)
library(DAAG)
library(car)
#library(TeachingDemos)
library(FitAR)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
autos2.pca <- prcomp(autos2[1:14],scale=TRUE,center=TRUE)
plot(autos2.pca)
summary(autos2.pca)
autos2.pcr <- lm(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
#summary(autos2.pca)
autos2.pcr2 <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
#met boxcox
boxcox(autos2$price~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
lambda <- -0.4
autos2.bcprice <-   bxcx(autos2$price, lambda, InverseQ = FALSE, type = "BoxCox")
autos2.bcpcr <- lm(autos2.bcprice~autos2.pca$x[,1]+autos2.pca$x[,2]+autos2.pca$x[,3]+autos2.pca$x[,4])
autos2.price <- bxcx(autos2.bcpcr$fitted.values, lambda,InverseQ= TRUE, type = "BoxCox")
plot(autos2$price,autos2.price)
#manuele PCR
sqrt(sum((autos2.pcr$residuals)^2))/159
#automatisch met pcr commando
sqrt(sum((autos2.pcr2$residuals)^2))/159
#manuele met boxcox transfo
sqrt(sum((autos2.price-autos2$price)^2))/159
plot(autos2$price,autos2.pcr$fitted.values)
lines(c(1:40000),c(1:40000),col='red')
crossval(autos2.pcr,3)
crossval(autos2.pcr2,3)
crossval(autos2.pcr2,autos2,3)
crossval(autos2.pcr2,autos2,3)
crossval(autos2.pcr2,autos2,3)
crossval(autos2.pcr2,autos2,3)
crossval(autos2.pcr,autos2,3)
crossval(autos2.pcr,autos2,3)
#Andreas Put & Li Quan - May 23, 2011
#homework 2
#library(FactoMineR)
library(pls)
library(MASS)
library(boot)
library(DAAG)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
#nobs <- nrow(autos2)
#idx <- 1:nobs
#trainingidx <- sample(idx, trunc(length(idx)/3))
#autos2.training <- autos2[-trainingidx,]
#autos2.validation <- autos2[trainingidx,]
#biplot(autos2)
autos3 <- autos2
for (i in c(4,7,11,15)) {
  autos3[,i] <- log(autos3[,i])
  print(i)
}
autos3 <- autos3[,-10]
autos2.pca <- prcomp(autos2,scale=TRUE,center=TRUE)
plot(autos2.pca)
#summary(autos2.pca)
autos2.pcr <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
crossval(autos2.pcr,autos2,3)
print(sum(abs(residuals(autos2.pcr)))/nobs)
#qqnorm(autos2.pca)
#linear<-lm(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,autos2)
#plot(linear)
autos2.initial <- lm(price~1,autos2)
autos2.aic <- stepAIC(autos2.initial,list(upper=~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,lower=~1),direction="both")
cvtemp <- CVlm(df=autos2, lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2), m=3) # 3 fold cross-validation
linear<-lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2.training)
autos2.pls <- plsr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
biplot(autos2.pls)
for (i in 1:14) {
  hist(autos2[,i])
  readline('CR to continue ')
  print(i)
  }
#Andreas Put & Li Quan - May 23, 2011
#homework 2
#library(FactoMineR)
library(pls)
library(MASS)
library(boot)
library(DAAG)
autos<-read.table("autos.txt",header=T,sep=",",na.strings="?");
autos$symboling <- as.ordered(autos$symboling)
autos <- na.omit(autos)
autos2 <- autos[sapply(autos,is.numeric)]
#nobs <- nrow(autos2)
#idx <- 1:nobs
#trainingidx <- sample(idx, trunc(length(idx)/3))
#autos2.training <- autos2[-trainingidx,]
#autos2.validation <- autos2[trainingidx,]
#biplot(autos2)
autos3 <- autos2
for (i in c(4,7,11,15)) {
  autos3[,i] <- log(autos3[,i])
  print(i)
}
autos3 <- autos3[,-10]
autos2.pca <- prcomp(autos2,scale=TRUE,center=TRUE)
plot(autos2.pca)
#summary(autos2.pca)
autos2.pcr <- pcr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
#width+length+horsepower+height+city.mpg+highway.mpg
plot(autos2.pcr)
lines(c(1:40000),c(1:40000),col="red")
crossval(autos2.pcr,autos2,3)
print(sum(abs(residuals(autos2.pcr)))/nobs)
#qqnorm(autos2.pca)
#linear<-lm(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,autos2)
#plot(linear)
autos2.initial <- lm(price~1,autos2)
autos2.aic <- stepAIC(autos2.initial,list(upper=~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg,lower=~1),direction="both")
cvtemp <- CVlm(df=autos2, lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2), m=3) # 3 fold cross-validation
linear<-lm(price~curb.weight+width+engine.size+peak.rpm+length+stroke+bore+wheel.base,data = autos2.training)
autos2.pls <- plsr(price~normalized.losses+wheel.base+length+width+height+curb.weight+engine.size+bore+stroke+compression.ratio+horsepower+peak.rpm+city.mpg+highway.mpg, ncomp=4, autos2, validation = "CV",scale=TRUE,center=TRUE)
biplot(autos2.pls)
for (i in 1:14) {
  hist(autos2[,i])
  readline('CR to continue ')
  print(i)
  }
crossval(autos2.pcr,autos2,3)
help(crossval)
